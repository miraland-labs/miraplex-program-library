/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as solartiToken from '@solarti/solarti-token'
import * as beet from '@miraplex/beet'
import * as web3 from '@solarti/web3.js'

/**
 * @category Instructions
 * @category CloseDistributor
 * @category generated
 */
export type CloseDistributorInstructionArgs = {
  bump: number
  walletBump: number
}
/**
 * @category Instructions
 * @category CloseDistributor
 * @category generated
 */
export const closeDistributorStruct = new beet.BeetArgsStruct<
  CloseDistributorInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['walletBump', beet.u8],
  ],
  'CloseDistributorInstructionArgs'
)
/**
 * Accounts required by the _closeDistributor_ instruction
 *
 * @property [**signer**] base
 * @property [_writable_] distributor
 * @property [_writable_] distributorWallet
 * @property [] receiver
 * @category Instructions
 * @category CloseDistributor
 * @category generated
 */
export type CloseDistributorInstructionAccounts = {
  base: web3.PublicKey
  distributor: web3.PublicKey
  distributorWallet: web3.PublicKey
  receiver: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const closeDistributorInstructionDiscriminator = [
  202, 56, 180, 143, 46, 104, 106, 112,
]

/**
 * Creates a _CloseDistributor_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CloseDistributor
 * @category generated
 */
export function createCloseDistributorInstruction(
  accounts: CloseDistributorInstructionAccounts,
  args: CloseDistributorInstructionArgs,
  programId = new web3.PublicKey('rdrppvBxnXBwBXVLTsoGuBZiZfhJu3JtGLUfMaJpgjQ')
) {
  const [data] = closeDistributorStruct.serialize({
    instructionDiscriminator: closeDistributorInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.base,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.distributor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.distributorWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.receiver,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? solartiToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
